rule: n_Try[1]; inv: ((n[1] = C) & (n[2] = C)); g: TRUE; rel: invHoldForRule1
rule: n_Try[2]; inv: ((n[1] = C) & (n[2] = C)); g: TRUE; rel: invHoldForRule1
rule: n_Try[3]; inv: ((n[1] = C) & (n[2] = C)); g: TRUE; rel: invHoldForRule2
rule: n_Crit[1]; inv: ((n[1] = C) & (n[2] = C)); g: TRUE; rel: invHoldForRule3-inv__2:((n[2] = C) & (x = TRUE))
rule: n_Crit[2]; inv: ((n[1] = C) & (n[2] = C)); g: TRUE; rel: invHoldForRule3-inv__2:((n[1] = C) & (x = TRUE))
rule: n_Crit[3]; inv: ((n[1] = C) & (n[2] = C)); g: TRUE; rel: invHoldForRule2
rule: n_Exit[1]; inv: ((n[1] = C) & (n[2] = C)); g: TRUE; rel: invHoldForRule1
rule: n_Exit[2]; inv: ((n[1] = C) & (n[2] = C)); g: TRUE; rel: invHoldForRule1
rule: n_Exit[3]; inv: ((n[1] = C) & (n[2] = C)); g: TRUE; rel: invHoldForRule2
rule: n_Idle[1]; inv: ((n[1] = C) & (n[2] = C)); g: TRUE; rel: invHoldForRule1
rule: n_Idle[2]; inv: ((n[1] = C) & (n[2] = C)); g: TRUE; rel: invHoldForRule1
rule: n_Idle[3]; inv: ((n[1] = C) & (n[2] = C)); g: TRUE; rel: invHoldForRule2
rule: n_Try[1]; inv: ((n[1] = C) & (x = TRUE)); g: TRUE; rel: invHoldForRule1
rule: n_Try[2]; inv: ((n[1] = C) & (x = TRUE)); g: TRUE; rel: invHoldForRule2
rule: n_Crit[1]; inv: ((n[1] = C) & (x = TRUE)); g: TRUE; rel: invHoldForRule1
rule: n_Crit[2]; inv: ((n[1] = C) & (x = TRUE)); g: TRUE; rel: invHoldForRule1
rule: n_Exit[1]; inv: ((n[1] = C) & (x = TRUE)); g: TRUE; rel: invHoldForRule1
rule: n_Exit[2]; inv: ((n[1] = C) & (x = TRUE)); g: TRUE; rel: invHoldForRule2
rule: n_Idle[1]; inv: ((n[1] = C) & (x = TRUE)); g: TRUE; rel: invHoldForRule1
rule: n_Idle[2]; inv: ((n[1] = C) & (x = TRUE)); g: TRUE; rel: invHoldForRule3-inv__3:((n[1] = C) & (n[2] = E))
rule: n_Try[1]; inv: ((n[2] = C) & (n[1] = E)); g: TRUE; rel: invHoldForRule1
rule: n_Try[2]; inv: ((n[2] = C) & (n[1] = E)); g: TRUE; rel: invHoldForRule1
rule: n_Try[3]; inv: ((n[2] = C) & (n[1] = E)); g: TRUE; rel: invHoldForRule2
rule: n_Crit[1]; inv: ((n[2] = C) & (n[1] = E)); g: TRUE; rel: invHoldForRule1
rule: n_Crit[2]; inv: ((n[2] = C) & (n[1] = E)); g: TRUE; rel: invHoldForRule3-inv__4:((n[1] = E) & (x = TRUE))
rule: n_Crit[3]; inv: ((n[2] = C) & (n[1] = E)); g: TRUE; rel: invHoldForRule2
rule: n_Exit[1]; inv: ((n[2] = C) & (n[1] = E)); g: TRUE; rel: invHoldForRule3-inv__1:((n[1] = C) & (n[2] = C))
rule: n_Exit[2]; inv: ((n[2] = C) & (n[1] = E)); g: TRUE; rel: invHoldForRule1
rule: n_Exit[3]; inv: ((n[2] = C) & (n[1] = E)); g: TRUE; rel: invHoldForRule2
rule: n_Idle[1]; inv: ((n[2] = C) & (n[1] = E)); g: TRUE; rel: invHoldForRule1
rule: n_Idle[2]; inv: ((n[2] = C) & (n[1] = E)); g: TRUE; rel: invHoldForRule1
rule: n_Idle[3]; inv: ((n[2] = C) & (n[1] = E)); g: TRUE; rel: invHoldForRule2
rule: n_Try[1]; inv: ((n[1] = E) & (x = TRUE)); g: TRUE; rel: invHoldForRule1
rule: n_Try[2]; inv: ((n[1] = E) & (x = TRUE)); g: TRUE; rel: invHoldForRule2
rule: n_Crit[1]; inv: ((n[1] = E) & (x = TRUE)); g: TRUE; rel: invHoldForRule1
rule: n_Crit[2]; inv: ((n[1] = E) & (x = TRUE)); g: TRUE; rel: invHoldForRule1
rule: n_Exit[1]; inv: ((n[1] = E) & (x = TRUE)); g: TRUE; rel: invHoldForRule3-inv__2:((n[1] = C) & (x = TRUE))
rule: n_Exit[2]; inv: ((n[1] = E) & (x = TRUE)); g: TRUE; rel: invHoldForRule2
rule: n_Idle[1]; inv: ((n[1] = E) & (x = TRUE)); g: TRUE; rel: invHoldForRule1
rule: n_Idle[2]; inv: ((n[1] = E) & (x = TRUE)); g: TRUE; rel: invHoldForRule3-inv__5:((n[1] = E) & (n[2] = E))
rule: n_Try[1]; inv: ((n[2] = E) & (n[1] = E)); g: TRUE; rel: invHoldForRule1
rule: n_Try[2]; inv: ((n[2] = E) & (n[1] = E)); g: TRUE; rel: invHoldForRule1
rule: n_Try[3]; inv: ((n[2] = E) & (n[1] = E)); g: TRUE; rel: invHoldForRule2
rule: n_Crit[1]; inv: ((n[2] = E) & (n[1] = E)); g: TRUE; rel: invHoldForRule1
rule: n_Crit[2]; inv: ((n[2] = E) & (n[1] = E)); g: TRUE; rel: invHoldForRule1
rule: n_Crit[3]; inv: ((n[2] = E) & (n[1] = E)); g: TRUE; rel: invHoldForRule2
rule: n_Exit[1]; inv: ((n[2] = E) & (n[1] = E)); g: TRUE; rel: invHoldForRule3-inv__3:((n[1] = C) & (n[2] = E))
rule: n_Exit[2]; inv: ((n[2] = E) & (n[1] = E)); g: TRUE; rel: invHoldForRule3-inv__3:((n[2] = C) & (n[1] = E))
rule: n_Exit[3]; inv: ((n[2] = E) & (n[1] = E)); g: TRUE; rel: invHoldForRule2
rule: n_Idle[1]; inv: ((n[2] = E) & (n[1] = E)); g: TRUE; rel: invHoldForRule1
rule: n_Idle[2]; inv: ((n[2] = E) & (n[1] = E)); g: TRUE; rel: invHoldForRule1
rule: n_Idle[3]; inv: ((n[2] = E) & (n[1] = E)); g: TRUE; rel: invHoldForRule2
